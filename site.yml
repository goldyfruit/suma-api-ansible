---
- name: SUSE Manager API demonstration
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    suma_host: https://suma-1.home.lan
    suma_endpoint: "{{ suma_host }}/rhn/manager/api"
    suma_verify: false
    suma_login: suma
    # Should be in vault but we keep it like this for demo purpose
    suma_password: suma2024
    suma_content_lifecycle_projet_name: susecon24-2024-h1-sles15
    suma_content_lifecycle_projet_description: |
      SUSE Linux Enterprise Server 15 SP5 patches for the first half of 2024
    suma_content_lifecycle_projet_sources:
      - label: sle-product-sles15-sp5-pool-x86_64
      - label: sle-product-sles15-sp5-updates-x86_64
      - label: sle-manager-tools15-pool-x86_64-sp5
      - label: sle-manager-tools15-updates-x86_64-sp5
      - label: sle-module-basesystem15-sp5-pool-x86_64
      - label: sle-module-basesystem15-sp5-updates-x86_64
      - label: sle-module-python3-15-sp5-pool-x86_64
      - label: sle-module-python3-15-sp5-updates-x86_64
      - label: sle-module-server-applications15-sp5-pool-x86_64
      - label: sle-module-server-applications15-sp5-updates-x86_64
    suma_content_lifecycle_filter_name: first-month-2024
    suma_content_lifecycle_build_description: |
      Build triggered by ServiceNow Change Request 549812
    suma_content_lifecycle_projet_envionments:
      - env: staging
        description: First lot of servers to get patched. Non-Prod
        predecessor: ""
      - env: production
        description: Second lot of servers to get patched. Prod
        predecessor: staging
    suma_content_lifecycle_promote_production: false
    suma_activation_keys:
      - description: "{{ suma_content_lifecycle_projet_name }}-staging"
        channel: "{{ suma_content_lifecycle_projet_name }}-staging-sle-product-sles15-sp5-pool-x86_64"
        child_channels:
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-product-sles15-sp5-updates-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-manager-tools15-pool-x86_64-sp5"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-manager-tools15-updates-x86_64-sp5"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-module-basesystem15-sp5-pool-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-module-basesystem15-sp5-updates-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-module-python3-15-sp5-pool-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-module-python3-15-sp5-updates-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-module-server-applications15-sp5-pool-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-staging-sle-module-server-applications15-sp5-updates-x86_64"
        environment: staging
      - description: "{{ suma_content_lifecycle_projet_name }}-production"
        channel: "{{ suma_content_lifecycle_projet_name }}-production-sle-product-sles15-sp5-pool-x86_64"
        child_channels:
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-product-sles15-sp5-updates-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-manager-tools15-pool-x86_64-sp5"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-manager-tools15-updates-x86_64-sp5"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-module-basesystem15-sp5-pool-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-module-basesystem15-sp5-updates-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-module-python3-15-sp5-pool-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-module-python3-15-sp5-updates-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-module-server-applications15-sp5-pool-x86_64"
          - "{{ suma_content_lifecycle_projet_name }}-production-sle-module-server-applications15-sp5-updates-x86_64"
        environment: production
    suma_servers_to_patch:
      - host: susecon2024-sles15sp5-staging.home.lan
        environment: staging
        activation_key: "1-{{ suma_content_lifecycle_projet_name }}-staging"
        # lookup() should be used but we keep it like this for demo purpose
        ssh_key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABB8+o4Sb/
          kOMIShk5j+jdRhAAAAGAAAAAEAAAAzAAAAC3NzaC1lZDI1NTE5AAAAIBblzDYime7qRc51
          sVGvM5UtokFiiOq9rJY/3puuZth9AAAAoNRdgn4GFh3xfOXQpjcW+GKoi8vIHEZfB+Vq2X
          Xom/wm56Vi/vDzYZLODc8QGWrYrius9xwq+5HZLew/2HqS7fm3VXw9LCCoRA/hSHO5gpcV
          LeDdDUuvHeybAGJo9XFnXTwXWq4ZvLJRy2TdP0DtxqXYYfCY4jI0psfRRjSh/uus7vfnaS
          Zwwu1h7LzS2lPFPq0/9Bv/RfiqVqpWHKmdcm8=
          -----END OPENSSH PRIVATE KEY-----
        # Should be in vault but we keep it like this for demo purpose
        ssh_key_pass: susecon2024
      - host: susecon2024-sles15sp5-production.home.lan
        environment: production
        activation_key: "1-{{ suma_content_lifecycle_projet_name }}-production"
        # lookup() should be used but we keep it like this for demo purpose
        ssh_key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABB8+o4Sb/
          kOMIShk5j+jdRhAAAAGAAAAAEAAAAzAAAAC3NzaC1lZDI1NTE5AAAAIBblzDYime7qRc51
          sVGvM5UtokFiiOq9rJY/3puuZth9AAAAoNRdgn4GFh3xfOXQpjcW+GKoi8vIHEZfB+Vq2X
          Xom/wm56Vi/vDzYZLODc8QGWrYrius9xwq+5HZLew/2HqS7fm3VXw9LCCoRA/hSHO5gpcV
          LeDdDUuvHeybAGJo9XFnXTwXWq4ZvLJRy2TdP0DtxqXYYfCY4jI0psfRRjSh/uus7vfnaS
          Zwwu1h7LzS2lPFPq0/9Bv/RfiqVqpWHKmdcm8=
          -----END OPENSSH PRIVATE KEY-----
        # Should be in vault but we keep it like this for demo purpose
        ssh_key_pass: susecon2024

  handlers:
    - name: Retrieve SUSE Manager content lifecycle filters - Handler
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/listFilters"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_filters
      failed_when: not _suma_content_lifecycle_filters.json.success | bool

  pre_tasks:
    - name: Retrieve SUSE Manager credentials
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/auth/login"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
        body: |
          {
            "login": "{{ suma_login }}",
            "password": "{{ suma_password }}"
          }
        body_format: json
        status_code: 200
      register: _suma_credentials
      failed_when: not _suma_credentials.json.success | bool
      tags:
        - always

    - name: Set suma_cookie fact
      vars:
        _suma_jsessionid: "{{ _suma_credentials.cookies['JSESSIONID'] }}"
        _suma_pxt: "{{ _suma_credentials.cookies['pxt-session-cookie'] }}"
      ansible.builtin.set_fact:
        suma_cookie: "JSESSIONID={{ _suma_jsessionid }}; pxt-session-cookie={{ _suma_pxt }}"
      tags:
        - always

  tasks:
    - name: Retrieve SUSE Manager content lifecycle projects
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/listProjects"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_projects
      failed_when: not _suma_content_lifecycle_projects.json.success | bool

    - name: Create SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/createProject"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "projectLabel": "{{ suma_content_lifecycle_projet_name }}",
            "name": "{{ suma_content_lifecycle_projet_name }}",
            "description": "{{ suma_content_lifecycle_projet_description }}"
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_project_create
      failed_when: not _suma_content_lifecycle_project_create.json.success | bool
      when: _suma_content_lifecycle_projects.json.result | selectattr("label", "equalto", suma_content_lifecycle_projet_name) | list | count == 0

    - name: Retrieve sources from SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/listProjectSources?projectLabel={{ suma_content_lifecycle_projet_name }}"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_project_sources
      failed_when: not _suma_content_lifecycle_project_sources.json.success | bool

    - name: Attach sources to SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/attachSource"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "projectLabel": "{{ suma_content_lifecycle_projet_name }}",
            "sourceType": "software",
            "sourceLabel": "{{ item.label }}"
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_attach_sources
      failed_when: not _suma_content_lifecycle_attach_sources.json.success | bool
      loop: "{{ suma_content_lifecycle_projet_sources }}"
      when: _suma_content_lifecycle_project_sources.json.result | selectattr("channelLabel", "equalto", item) | list | count == 0

    - name: Retrieve SUSE Manager content lifecycle filters
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/listFilters"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_filters

    - name: Create SUSE Manager content lifecycle filter
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/createFilter"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "name": "{{ suma_content_lifecycle_filter_name }}",
            "rule": "deny",
            "entityType": "erratum",
            "criteria": {
              "field": "issue_date",
              "matcher": "greatereq",
              "value": "2024-01-01T00:00:00.000Z"
            }
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_filter_create
      changed_when: _suma_content_lifecycle_filter_create.status == 200
      failed_when: not _suma_content_lifecycle_filter_create.json.success | bool
      notify: Retrieve SUSE Manager content lifecycle filters - Handler
      when: _suma_content_lifecycle_filters.json.result | selectattr("name", "equalto", suma_content_lifecycle_filter_name) | list | count == 0

    - name: Force all notified handlers to run at this point
      ansible.builtin.meta: flush_handlers

    - name: Set filter ID fact for SUSE Manager content lifecycle {{ suma_content_lifecycle_filter_name }} filter
      ansible.builtin.set_fact:
        suma_content_lifecycle_filter_id: "{{ item.id }}"
      loop: "{{ _suma_content_lifecycle_filters.json.result }}"
      when: item.name == suma_content_lifecycle_filter_name

    - name: Retrieve filters from SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/listProjectFilters?projectLabel={{ suma_content_lifecycle_projet_name }}"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_project_filters
      failed_when: not _suma_content_lifecycle_project_filters.json.success | bool

    - name: Attach filter to SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/attachFilter"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "projectLabel": "{{ suma_content_lifecycle_projet_name }}",
            "filterId": {{ suma_content_lifecycle_filter_id }}
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_attach_filters
      failed_when: not _suma_content_lifecycle_attach_filters.json.success | bool

    - name: Retrieve environments SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/listProjectEnvironments?projectLabel={{ suma_content_lifecycle_projet_name }}"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_project_environments
      failed_when: not _suma_content_lifecycle_project_environments.json.success | bool

    - name: Create SUSE Manager content lifecycle project's environments
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/createEnvironment"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "projectLabel": "{{ suma_content_lifecycle_projet_name }}",
            "name": "{{ item.env }}",
            "envLabel": "{{ item.env }}",
            "description": "{{ item.description }}",
            "predecessorLabel": "{{ item.predecessor }}"
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_project_environments_create
      failed_when: not _suma_content_lifecycle_project_environments_create.json.success | bool
      loop: "{{ suma_content_lifecycle_projet_envionments }}"
      when: _suma_content_lifecycle_project_environments.json.result | selectattr("name", "equalto", item.env) | list | count == 0

    - name: Build SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/buildProject"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "projectLabel": "{{ suma_content_lifecycle_projet_name }}",
            "message": "{{ suma_content_lifecycle_build_description }}"
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_project_build
      failed_when: not _suma_content_lifecycle_project_build.json.success | bool

    - name: Retrieve SUSE Manager activation keys
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/activationkey/listActivationKeys"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_activation_keys
      failed_when: not _suma_activation_keys.json.success | bool
      tags: always

    - name: Create staging SUSE Manager activation key
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/activationkey/create"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "key": "{{ item.description }}",
            "description": "{{ item.description }}",
            "baseChannelLabel": "{{ item.channel }}",
            "universalDefault": false,
            "entitlements": []
          }
        body_format: json
        status_code: 200
      register: _suma_activation_keys_create_staging
      failed_when: not _suma_activation_keys_create_staging.json.success | bool
      loop: "{{ suma_activation_keys }}"
      when:
        - item.environment == "staging"
        - _suma_activation_keys.json.result | selectattr("key", "equalto", "1-" + item.description) | list | count == 0

    - name: Add child channels to the staging SUSE Manager activation key
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/activationkey/addChildChannels"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "key": "1-{{ item.0.description }}",
            "childChannelLabels": "{{ item.1 }}"
          }
        body_format: json
        status_code: 200
      register: _suma_activation_key_add_child_staging
      failed_when: not _suma_activation_key_add_child_staging.json.success | bool
      loop: "{{ suma_activation_keys | subelements('child_channels') }}"
      when: item.0.environment == "staging"

    - name: Retrieve SUSE Manager registered systems
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/system/listSystems"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_registered_systems
      failed_when: not _suma_registered_systems.json.success | bool
      tags: always

    - name: Retrieve staging environment status from SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/lookupEnvironment?projectLabel={{ suma_content_lifecycle_projet_name }}&envLabel=staging"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_project_environment_status_staging
      failed_when: not _suma_content_lifecycle_project_environment_status_staging.json.success | bool
      until: _suma_content_lifecycle_project_environment_status_staging.json.result.status == "built"
      retries: 30
      delay: 3

    - name: Register systems into SUSE Manager
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/system/bootstrapWithPrivateSshKey"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "host": "{{ item.host }}",
            "sshPort": 22,
            "sshUser": "root",
            "sshPrivKey": "{{ item.ssh_key }}",
            "sshPrivKeyPass": "{{ item.ssh_key_pass }}",
            "activationKey": "{{ item.activation_key }}",
            "saltSSH": false
          }
        body_format: json
        status_code: 200
      async: 300
      poll: 0
      loop: "{{ suma_servers_to_patch }}"
      when:
        - item.environment == "staging"
        - _suma_registered_systems.json.result | selectattr("name", "equalto", item.host) | list | count == 0

    - name: Promote SUSE Manager content lifecycle build from staging to production
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/promoteProject"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "projectLabel": "{{ suma_content_lifecycle_projet_name }}",
            "envLabel": "staging"
          }
        body_format: json
        status_code: 200
      register: _suma_content_lifecycle_promote
      failed_when: not _suma_content_lifecycle_promote.json.success | bool
      when: suma_content_lifecycle_promote_production | bool
      tags:
        - promote

    - name: Create production SUSE Manager activation key
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/activationkey/create"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "key": "{{ item.description }}",
            "description": "{{ item.description }}",
            "baseChannelLabel": "{{ item.channel }}",
            "universalDefault": false,
            "entitlements": []
          }
        body_format: json
        status_code: 200
      register: _suma_activation_key_create_production
      failed_when: not _suma_activation_key_create_production.json.success | bool
      loop: "{{ suma_activation_keys }}"
      when:
        - item.environment == "production"
        - _suma_activation_keys.json.result | selectattr("key", "equalto", "1-" + item.description) | list | count == 0
      tags:
        - promote

    - name: Add child channels to the production SUSE Manager activation key
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/activationkey/addChildChannels"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "key": "1-{{ item.0.description }}",
            "childChannelLabels": "{{ item.1 }}"
          }
        body_format: json
        status_code: 200
      register: _suma_activation_key_add_child_production
      failed_when: not _suma_activation_key_add_child_production.json.success | bool
      loop: "{{ suma_activation_keys | subelements('child_channels') }}"
      when: item.0.environment == "production"
      tags:
        - promote

    - name: Retrieve production environment status from SUSE Manager content lifecycle project
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/contentmanagement/lookupEnvironment?projectLabel={{ suma_content_lifecycle_projet_name }}&envLabel=production"
        validate_certs: "{{ suma_verify }}"
        method: GET
        headers:
          Accept: application/json
          Cookie: "{{ suma_cookie }}"
        status_code: 200
      register: _suma_content_lifecycle_project_environment_status_production
      failed_when: not _suma_content_lifecycle_project_environment_status_production.json.success | bool
      until: _suma_content_lifecycle_project_environment_status_production.json.result.status == "built"
      retries: 30
      delay: 3
      tags:
        - promote

    - name: Register systems into SUSE Manager
      ansible.builtin.uri:
        url: "{{ suma_endpoint }}/system/bootstrapWithPrivateSshKey"
        validate_certs: "{{ suma_verify }}"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "{{ suma_cookie }}"
        body: |
          {
            "host": "{{ item.host }}",
            "sshPort": 22,
            "sshUser": "root",
            "sshPrivKey": "{{ item.ssh_key }}",
            "sshPrivKeyPass": "{{ item.ssh_key_pass }}",
            "activationKey": "{{ item.activation_key }}",
            "saltSSH": false
          }
        body_format: json
        status_code: 200
      async: 300
      poll: 0
      loop: "{{ suma_servers_to_patch }}"
      when:
        - item.environment == "production"
        - _suma_registered_systems.json.result | selectattr("name", "equalto", item.host) | list | count == 0
      tags:
        - promote
